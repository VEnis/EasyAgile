{% extends "::base.html.twig" %}

{% block body %}
<div class="page-header">
    <h1>{{ story.title }} <small>In session "{{ session.title }}"</small></h1>
</div>

<div class="row-fluid">
    <div class="span6">
        <table class="table table-bordered table-condensed">
            <thead>
            <tr>
                <th>User</th>
                <th>Estimate</th>
            </tr>
            </thead>
            <tbody>
            {% for people in session.peoples %}
                <tr>
                    <td><i class="icon-user"></i> {{ people.username }}{% if people.username == app.user.username %} (I am){% endif %}</td>
                    <td><span id="user_estimate_{{ people.id }}" style="display: none;">{{ random(['0', '1/2', '1', '2', '3', '5', '8', '13', '20', '40', '100', '&#8734;', '?'])|raw }}</span></td>
                </tr>
            {% endfor %}

            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table table-bordered table-condensed">
            <thead>
            <tr>
                <th>Parameter</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            <tr class="info">
                <td>Focus-factor (value is hardcoded currently)</td>
                <td>0.4</td>
            </tr>
            <tr class="info">
                <td>Mean value (ideal hours)</td>
                <td><span id="ideal_mean_value">13</span></td>
            </tr>
            <tr class="info">
                <td>Mean value (real hours)</td>
                <td><span id="real_mean_value">32.5</span></td>
            </tr>
            </tbody>
        </table>

        <span id="spinner-my-estimation"></span>
        <div class="btn-group">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                Set my estimate to
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
                {{ macro.my_possible_estimate(1, 1, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(2, 2, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(3, 3, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(5, 5, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(8, 8, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(13, 13, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(20, 20, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(40, 40, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(100, 100, story.id, session.id, app.user.id) }}
                <li class="divider"></li>
                {{ macro.my_possible_estimate(0, 0, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(0.5, 0.5, story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(-3, "&#8734;", story.id, session.id, app.user.id) }}
                <li class="divider"></li>
                {{ macro.my_possible_estimate(-2, "?", story.id, session.id, app.user.id) }}
                {{ macro.my_possible_estimate(-1, "<i class='icon-glass'></i> Pause", story.id, session.id, app.user.id) }}
            </ul>
        </div>
        <hr>
        <div>
            <form action="{{ path('poker_session_story_gameover', { 'id': story.id, 'session_id': session.id }) }}" method="post" {{ form_enctype(estimate_fofm) }}>
                {{ form_widget(estimate_fofm) }}
                <p>
                    <button type="submit" class="btn btn-primary">Game Over</button>
                </p>
            </form>
        </div>
    </div>
</div>


{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="/bootstrap-ajax/spin.min.js" type="text/javascript"></script>
    <script src="/bootstrap-ajax/bootstrap-ajax.js" type="text/javascript"></script>

    <script type="text/javascript">
        function updateEstimates(data)
        {
            for(var i in data.estimates){
                var estimate = data.estimates[i];
                var id = "#user_estimate_"+estimate.uid;
                $(id).text(estimate.estimate);
            }

            if(data.complete){
                $('[id^="user_estimate_"]').show();
            } else {
                $('[id^="user_estimate_"]').hide();
            }

            $('[id^="user_estimate_"]').show();
            calculateMeanValues(data.estimates);
        }

        function calculateMeanValues(data)
        {
            var validValues = [0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100];
            var dataForCalculation = data
                .filter(function(x){return (-1 != jQuery.inArray(parseFloat(x.estimate), validValues))})
                .map(function(x){return parseFloat(x.estimate)})
            ;

            var idealMeanValue = mean(dataForCalculation);
            var focusFactor = 0.4;
            var realMeanValue = idealMeanValue / focusFactor;

            $("#ideal_mean_value").text(idealMeanValue);
            $("#real_mean_value").text(realMeanValue);

            var $newEstimateElement = $("#application_planningpokerbundle_storytype_estimate");
            if($newEstimateElement.val() == 0){
                $newEstimateElement.val(realMeanValue);
            }
        }

        function mean(numbers) {
            var total = 0,
                    i;
            for (i = 0; i < numbers.length; i += 1) {
                total += numbers[i];
            }
            return total / numbers.length;
        }

        $(function() {
            setInterval(function(){
                $.ajax({ url: "{{ path('poker_session_story_estimates', { 'id': story.id, 'session_id': session.id }) }}", success: function(data){
                    updateEstimates(data);
                }, dataType: "json"});
            }, 2000);
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>

    </style>
{% endblock %}

{% macro my_possible_estimate(store_as, display_as, story_id, session_id, user_id) %}
    <li><a href="{{ path('poker_session_story_set_estimate', { 'id': story_id, 'session_id': session_id, 'user_id': user_id, 'estimate':store_as }) }}" class="ajax" data-spinner="off">{{ display_as|raw }}</a></li>
{% endmacro %}
{% import _self as macro %}